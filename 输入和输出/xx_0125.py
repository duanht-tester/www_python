# -*- encoding: UTF-8 -*-
# __author__ = 'lenovo'

"""
格式化输出
1、整数的输出
语法说明
格式化符号格式说明备注 %o 八进制 oct%d 十进制 dec%x 十六进制 hex。
举个栗子
"""
print('%o' % 20)  # 八进制24
print('%d' % 20)  # 十进制20
print('%x' % 24)  # 十六进制18
"""
2、浮点数输出
语法说明
格式化符号说明备注 %f 保留小数点后面六位有效数字 float%e 保留小数点后
面六位有效数字 %g 在保证六位有效数字的前提下，使用小数方式，否则使用科
学计数法。
举个栗子：
"""
print('%f' % 1.11)         # 默认保留6位小数1.110000
print('%.1f' % 1.11)       # 取1位小数1.1
print('%e' % 1.11)         # 默认6位小数，用科学计数法1.110000e+00
print('%.3e' % 1.11)       # 取3位小数，用科学计数法1.110e+00
print('%g' % 1111.1111)    # 默认6位有效数字1111.11
print('%.7g' % 1111.1111)  # 取7位有效数字1111.111
print('%.2g' % 1111.1111)  # 取2位有效数字，自动转换为科学计数法1.1e+03
"""
3、字符串输出
语法说明
格式化符号说明备注 %s 字符串输出 string%10s 右对齐，占位符 10位%-10s
左对齐，占位符 10 位 %.2s 截取 2 位字符串 %10.2s10 位占位符，截取两位
字符串。
举个栗子：
"""
print('%s' % 'hello world')       # 字符串输出hello world
print('%20s' % 'hello world')     # 右对齐，取20位，不够则补位         hello world
print('%-20s' % 'hello world')    # 左对齐，取20位，不够则补位hello world
print('%.2s' % 'hello world')     # 取2位he
print('%10.2s' % 'hello world')   # 右对齐，取2位        he
print('%-10.2s' % 'hello world')  # 左对齐，取2位he
"""
将 mode 设置为 w+ 或 a+ 时，发现直接进行读操作，得到的内容都是空，但原
因不太相同：
如果 mode 设置为 w+，即使没有执行 write 操作，也会将文件内容清空，因此
这个时候直接进行读草稿，读到的是空内容。
"""
f = open(".\\test.txt", 'w+')
"""
如果 mode 设置为 a+，文件指针位置默认在最后面，因为读内容时，是按照指针
的位置往后读，所以如果指针位置在最后，那读出来的是空，在读之前，一
定要注意确认好指针位置是对的。
"""
# f = open(".\\test.txt", 'a+')
# f.write("append content")
# print(f.tell())    # 此时指针在文件字符末尾处
# f.seek(0)
# print(f.tell())    # 指针回到0的位置
# str = f.read()
# print(str)
# f.close()
# f = open(".\\test.txt", 'w+')
"""
对齐方式的取值：
<：左对齐
>：右对齐
^：居中
=：在正负号（如果有的话）和数字之间填充，该对齐选项仅对数字类型有效。
它可以输出类似 +0000120 这样的字符串。
"""
print("|", format("Runoob", "*>30"), "|")
print("|", format("Runoob", "*<30"), "|")
print("|", format("Runoob", "*^30"), "|")



















